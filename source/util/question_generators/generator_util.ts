import { randomInt, randomFromArray } from '../random_util';

// Powers of 10 are considered trivial to multiply since they don't change the digits of the
// multiplicand (only their positions).
export function isTrivialFactor(x: number): boolean {
  return x === 0 || Math.log10(x) % 1 === 0;
}

// Numbers that appear in the 12 by 12 times table that is assumed to be known by heart.
export const TIME_TABLE_FACTORS: number[] = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
];

// Numbers that appear in the squares table that is assumed to be known by heart.
export const SQUARES_TABLE: number[] = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
];

// Numbers that are in the times table but are not trivial.
export const SIMPLE_FACTORS: number[] = TIME_TABLE_FACTORS.filter((x) => !isTrivialFactor(x));

export function randomSimpleFactor(): number {
  return randomFromArray(SIMPLE_FACTORS);
}

// Numbers that are in the squares table but are not trivial.
export const SIMPLE_SQUARE_ROOTS: number[] = SQUARES_TABLE.filter((x) => !isTrivialFactor(x));

// Numbers that are in the sqares table but are not a simple factor.
export const TRICKY_SQUARE_ROOTS: number[] =
    SIMPLE_SQUARE_ROOTS.filter((x) => !SIMPLE_FACTORS.includes(x));

/**
 * Returns a uniformly random integer from the interval [2, 9] + [11, 99].
 * 0, 1, and 10 are removed because they are too easy to multiply.
 */
export function randomTwoDigitFactor(): number {
  let result = 2 + randomInt(98); // [2, 99]
  if (result >= 10) {
    result += 1;
  }
  return result;
}

/**
 * Returns a two digit integer that is greater than 12 and does not have a 0 digit.
 * These numbers are considered sligtly harder to multiply than the ones generated by
 * "generateSimpleFactor".
 */
export function randomNonTrivialTwoDigitFactor(): number {
  let result = randomInt(100 - 13 - 9);
  result += 13;
  for (let i = 20; i <= 90; i += 10) {
    if (result >= i) {
      result += 1;
    }
  }
  return result;
}

export function randomOperands(min: number, max: number, numberOfOperands: number): number[] {
  const result: number[] = [];
  for (let i = 0; i < numberOfOperands; ++i) {
    result.push(min + randomInt(1 + max - min));
  }
  return result;
}
